<?php

namespace WorldDirect\Buildinfo\SystemInformation;

use TYPO3\CMS\Core\Localization\LanguageService;
use TYPO3\CMS\Backend\Backend\Event\SystemInformationToolbarCollectorEvent;
use TYPO3\CMS\Backend\Toolbar\Enumeration\InformationStatus;

/**
 * ToolbarItemProvider
 * 
 * Provides 2 methods to get the "buildNumber" and the "buildTimestamp"
 * 
 * @author Klaus HÃ¶rmann-Engl <kho@world-direct.at>
 */
final class ToolbarItemProvider
{
    /**
     * Constant holding the language prefix
     */
    const LANG_PREFIX = 'LLL:EXT:buildinfo/Resources/Private/Language/locallang_db.xlf:';

    /**
     * The project path
     * 
     * @var string $projectPath
     */
    protected $projectPath = '';

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->projectPath = \TYPO3\CMS\Core\Core\Environment::getProjectPath();
    }

    /**
     * Function returns the content for the SystemInformationToolbar
     * 
     * @return void
     */
    public function getBuildNumber(SystemInformationToolbarCollectorEvent $event): void
    {
        $buildFile = $this->projectPath . '/buildNumber.txt';
        if (file_exists($buildFile) && !empty($buildFile)) {
            $event->getToolbarItem()->addSystemInformation(
                $this->getLanguageService()->sL(self::LANG_PREFIX .'buildinfo.buildNumber.title'),
                file_get_contents($buildFile),
                'actions-debug',
                InformationStatus::STATUS_INFO
            );
        }
    }

    /**
     * Function returns the date of the last build, and the age in days.
     * Uses the file "buildTimestamp.txt" which is generated by the Build process in
     * the Azure Devops Server.
     * 
     * @return void
     */
    public function getBuildDate(SystemInformationToolbarCollectorEvent $event): void
    {
        $buildFile = $this->projectPath . '/buildTimestamp.txt';
        if (file_exists($buildFile) && !empty($buildFile)) {
            $timestamp = file_get_contents($buildFile);
            $systemInformationToolbarItem = $event->getToolbarItem();
            $systemInformationToolbarItem->addSystemInformation(
                $this->getLanguageService()->sL(self::LANG_PREFIX .'buildinfo.buildTimestamp.title'),
                $this->formatTimestamp($timestamp),
                'actions-clock',
                InformationStatus::STATUS_INFO
            );
        }
    }

    /**
     * Formats the given unix timestamp to display the date
     * and the age in days.
     */
    private function formatTimestamp(int $timestamp): string
    {
        return date("d.m.Y H:i", $timestamp) . ' (' . $this->getLanguageService()->sL(self::LANG_PREFIX . 'buildinfo.age.title') . ': ' . $this->secondsToWords((time() - $timestamp)) . ')' ;
    }

    /**
     * Function converts seconds into words.
     * 
     * @param int $seconds The amount of seconds to convert
     * 
     * @return string A string with the duration in days and hours
     */
    private function secondsToWords(int $seconds): string
    {
        $langService = $this->getLanguageService();
        $dtF = new \DateTime('@0');
        $dtT = new \DateTime("@$seconds");
        return $dtF->diff($dtT)->format('%a') . ' ' . $langService->sL(self::LANG_PREFIX . 'buildinfo.days.title') . ', ' . $dtF->diff($dtT)->format('%h') . ' ' . $langService->sL(self::LANG_PREFIX . 'buildinfo.hours.title');
    }

    /**
     * Return a language service
     * 
     * @return LanguageService
     */
    private function getLanguageService(): LanguageService
    {
        return $GLOBALS['LANG'];
    }
}
